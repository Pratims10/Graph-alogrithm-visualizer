{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\Graph\\\\graph-algorithm-visualizer\\\\src\\\\components\\\\canvas.js\";\nimport React, { Component } from 'react';\nlet v1 = null,\n    v2 = null;\nexport class Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [],\n      edges: []\n    };\n  }\n\n  getMousePosition(event) {\n    let x = event.clientX; //this.refs.svg.style.marginLeft ;\n\n    let y = event.clientY - this.refs.svg.style.marginTop;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      let x1 = this.state.points[i].x;\n      let y1 = this.state.points[i].y;\n      let dist = (x - x1) * (x - x1) + (y - y1) * (y - y1);\n\n      if (dist <= 600) {\n        //                this.drawLine(event);\n        return;\n      }\n    }\n\n    this.setState(prev => {\n      points: prev.points.push({\n        x: x,\n        y: y\n      });\n    });\n    this.forceUpdate();\n  }\n\n  drawLine(e, idx) {\n    let u = document.getElementById(`point${idx}`);\n    u.style.fill = 'red';\n    if (v1 === null) v1 = idx;else {\n      v2 = idx;\n      u = document.getElementById(`point${v1}`);\n      u.style.fill = 'green';\n      u = document.getElementById(`point${v2}`);\n      u.style.fill = 'green';\n\n      for (let i = 0; i < this.state.edges.length; i++) {\n        if (this.state.edges[i].u === v1 && this.state.edges[i].v === v2) {\n          v1 = null;\n          v2 = null;\n          return;\n        } else if (this.state.edges[i].u === v2 && this.state.edges[i].v === v1) {\n          v1 = null;\n          v2 = null;\n          return;\n        }\n      }\n\n      this.setState(prev => {\n        edges: prev.edges.push({\n          u: v1,\n          v: v2\n        });\n      }, function () {\n        v1 = null;\n        v2 = null;\n      });\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    var pts = this.state.points.map((x, idx) => {\n      return React.createElement(\"circle\", {\n        key: \"point\" + idx,\n        id: \"point\" + idx,\n        cx: x.x,\n        cy: x.y,\n        r: \"12\",\n        stroke: \"black\",\n        onClick: event => this.drawLine(event, idx),\n        strokeWidth: \".5\",\n        style: {\n          fill: \"green\",\n          zIndex: '1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    });\n    var ptsidx = this.state.points.map((pt, idx) => {\n      return React.createElement(\"text\", {\n        fill: \"#fff\",\n        key: \"index\" + idx,\n        id: \"index\" + idx,\n        fontSize: \"12\",\n        fontFamily: \"Arial\",\n        x: pt.x - 4,\n        y: pt.y + 4,\n        onClick: event => this.drawLine(event, idx),\n        style: {\n          zIndex: '1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, idx);\n    });\n    var lines = this.state.edges.map((q, idx) => {\n      return React.createElement(\"line\", {\n        key: \"edge\" + idx,\n        x1: this.state.points[q.u].x,\n        y1: this.state.points[q.u].y,\n        x2: this.state.points[q.v].x,\n        y2: this.state.points[q.v].y,\n        style: {\n          stroke: 'rgb(255,0,0)',\n          strokeWidth: '2',\n          zIndex: '-1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      paintOrder: \"markers\",\n      ref: \"svg\",\n      width: window.innerWidth,\n      height: \"400\",\n      style: {\n        backgroundColor: 'rgb(230, 230, 230)'\n      },\n      onClick: event => this.getMousePosition(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, pts, ptsidx, lines));\n  }\n\n}\nexport default Canvas;","map":{"version":3,"sources":["H:/React/Graph/graph-algorithm-visualizer/src/components/canvas.js"],"names":["React","Component","v1","v2","Canvas","constructor","props","state","points","edges","getMousePosition","event","x","clientX","y","clientY","refs","svg","style","marginTop","i","length","x1","y1","dist","setState","prev","push","forceUpdate","drawLine","e","idx","u","document","getElementById","fill","v","render","pts","map","zIndex","ptsidx","pt","lines","q","stroke","strokeWidth","window","innerWidth","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nlet v1=null,v2=null;\r\nexport class Canvas extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             points:[],\r\n             edges:[]\r\n        }\r\n    }\r\n    \r\n    getMousePosition(event) { \r\n        let x = event.clientX;//this.refs.svg.style.marginLeft ;\r\n        let y = event.clientY-this.refs.svg.style.marginTop ;\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            let x1=this.state.points[i].x;\r\n            let y1=this.state.points[i].y;\r\n            let dist=(x-x1)*(x-x1)+(y-y1)*(y-y1);\r\n            if(dist<=600)\r\n            {\r\n//                this.drawLine(event);\r\n                return;\r\n            }\r\n        }\r\n        this.setState((prev)=>{\r\n            points:prev.points.push({\r\n                x:x,\r\n                y:y\r\n            })\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    drawLine(e,idx){\r\n        let u=document.getElementById(`point${idx}`);\r\n        u.style.fill='red';\r\n        if(v1===null)\r\n        v1=idx;\r\n        else {\r\n            v2=idx;\r\n            u=document.getElementById(`point${v1}`);\r\n            u.style.fill='green';\r\n            u=document.getElementById(`point${v2}`);\r\n            u.style.fill='green';\r\n            for(let i=0;i<this.state.edges.length;i++)\r\n            {\r\n                if(this.state.edges[i].u===v1 && this.state.edges[i].v===v2)\r\n                {   v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n                else if(this.state.edges[i].u===v2 && this.state.edges[i].v===v1)\r\n                {\r\n                    v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n            }\r\n            this.setState((prev)=>{\r\n                edges:prev.edges.push({\r\n                    u:v1,\r\n                    v:v2\r\n                })\r\n            },function(){\r\n                v1=null\r\n                v2=null\r\n            })\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var pts=this.state.points.map((x,idx)=>{\r\n            return(\r\n            <circle key={\"point\"+idx} id={\"point\"+idx} cx={x.x} cy={x.y} r=\"12\" stroke=\"black\" onClick={(event)=>this.drawLine(event,idx)} strokeWidth=\".5\" style={{fill:\"green\",zIndex:'1'}} />\r\n            )\r\n        })\r\n        var ptsidx=this.state.points.map((pt,idx)=>{\r\n            return(\r\n                <text fill=\"#fff\" key={\"index\"+idx} id={\"index\"+idx} fontSize=\"12\" fontFamily=\"Arial\" x={pt.x-4} y={pt.y+4} onClick={(event)=>this.drawLine(event,idx)} style={{zIndex:'1'}}>{idx}</text>\r\n            )\r\n        })\r\n        var lines=this.state.edges.map((q,idx)=>{\r\n            return(\r\n                <line key={\"edge\"+idx} x1={this.state.points[q.u].x} y1={this.state.points[q.u].y} x2={this.state.points[q.v].x} y2={this.state.points[q.v].y} style={{stroke:'rgb(255,0,0)',strokeWidth:'2',zIndex:'-1'}} />\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n            <svg paintOrder='markers' ref='svg' width={window.innerWidth} height=\"400\" style={{backgroundColor: 'rgb(230, 230, 230)'}} onClick={(event)=>this.getMousePosition(event)}>\r\n            {pts}\r\n            {ptsidx}\r\n            {lines}\r\n            </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas\r\n"]},"metadata":{},"sourceType":"module"}