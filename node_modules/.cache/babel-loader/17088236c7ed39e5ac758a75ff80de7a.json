{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\Graph\\\\graph-algorithm-visualizer\\\\src\\\\components\\\\canvas.js\";\nimport React, { Component } from 'react';\nlet v1 = null,\n    v2 = null;\nlet adj = [];\nvar delay = 1000;\nexport class Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [],\n      edges: []\n    };\n  }\n\n  getMousePosition(event) {\n    let x = event.clientX; //this.refs.svg.style.marginLeft ;\n\n    let y = event.clientY - this.refs.svg.style.marginTop;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      let x1 = this.state.points[i].x;\n      let y1 = this.state.points[i].y;\n      let dist = (x - x1) * (x - x1) + (y - y1) * (y - y1);\n\n      if (dist <= 600) {\n        //                this.drawLine(event);\n        return;\n      }\n    }\n\n    this.setState(prev => {\n      points: prev.points.push({\n        x: x,\n        y: y\n      });\n    }, function () {\n      adj.push([]);\n    });\n    this.forceUpdate();\n  }\n\n  drawLine(e, idx) {\n    let u = document.getElementById(`point${idx}`);\n    u.style.fill = 'red';\n    if (v1 === null) v1 = idx;else {\n      v2 = idx;\n      u = document.getElementById(`point${v1}`);\n      u.style.fill = 'orange';\n      u = document.getElementById(`point${v2}`);\n      u.style.fill = 'orange';\n\n      for (let i = 0; i < this.state.edges.length; i++) {\n        if (this.state.edges[i].u === v1 && this.state.edges[i].v === v2) {\n          v1 = null;\n          v2 = null;\n          return;\n        } else if (this.state.edges[i].u === v2 && this.state.edges[i].v === v1) {\n          v1 = null;\n          v2 = null;\n          return;\n        }\n      }\n\n      this.setState(prev => {\n        edges: prev.edges.push({\n          u: v1,\n          v: v2\n        });\n      }, function () {\n        adj[v1].push({\n          vertex: v2,\n          edgeNo: this.state.edges.length - 1\n        });\n        adj[v2].push({\n          vertex: v1,\n          edgeNo: this.state.edges.length - 1\n        });\n        v1 = null;\n        v2 = null;\n      });\n      this.forceUpdate();\n    }\n  } //BFS TRAVERSAL OF GRAPH\n\n\n  bfsAnimations(s) {\n    let animations = [];\n    let vis = [];\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      vis[i] = false;\n    }\n\n    let queue = [];\n    queue.push(s);\n    vis[s] = true;\n\n    while (queue.length !== 0) {\n      var x = queue[0];\n      queue.shift();\n      animations.push({\n        x: x,\n        y: -1,\n        color: 'green'\n      });\n\n      for (let i = 0; i < adj[x].length; i++) {\n        if (vis[adj[x][i].vertex] === false) {\n          vis[adj[x][i].vertex] = true;\n          queue.push(adj[x][i].vertex);\n          animations.push({\n            x: adj[x][i].edgeNo,\n            y: -1,\n            color: 'edge'\n          });\n          animations.push({\n            x: adj[x][i].vertex,\n            y: -1,\n            color: 'blue'\n          });\n        }\n      }\n    }\n\n    return animations;\n  }\n\n  bfs(s) {\n    const animations = this.bfsAnimations(s);\n    let len = animations.length;\n\n    for (let i = 0; i < len; i++) {\n      if (animations[i].color === 'edge') {\n        let x1 = document.getElementById(`edge${animations[i].x}`);\n        setTimeout(() => {\n          x1.style.stroke = 'blue';\n        }, i * delay);\n      } else {\n        let x = document.getElementById(`point${animations[i].x}`);\n        setTimeout(() => {\n          x.style.fill = animations[i].color;\n        }, i * delay);\n      }\n    }\n  } //DFS ALGORITHM\n\n\n  dfsutil(s, vis, animations) {\n    animations.push({\n      x: s,\n      y: -1,\n      color: 'green'\n    });\n\n    for (let i = 0; i < adj[s].length; i++) {\n      if (!vis[adj[s][i].vertex]) {\n        vis[adj[s][i].vertex] = true;\n        animations.push({\n          x: adj[s][i].edgeNo,\n          y: -1,\n          color: 'edge'\n        });\n        animations.push({\n          x: adj[s][i].vertex,\n          y: -1,\n          color: 'blue'\n        });\n      }\n\n      this.dfsutil(adj[s][i].vertex, vis, animations);\n    }\n  }\n\n  dfsAnimations(s) {\n    var animations = [];\n    let vis = [];\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      vis[i] = false;\n    }\n\n    this.dfsutil(s, vis, animations);\n    return animations;\n  }\n\n  dfs() {\n    const animations = this.dfsAnimations(s);\n    let len = animations.length;\n\n    for (let i = 0; i < len; i++) {\n      if (animations[i].color === 'edge') {\n        let x1 = document.getElementById(`edge${animations[i].x}`);\n        setTimeout(() => {\n          x1.style.stroke = 'blue';\n        }, i * delay);\n      } else {\n        let x = document.getElementById(`point${animations[i].x}`);\n        setTimeout(() => {\n          x.style.fill = animations[i].color;\n        }, i * delay);\n      }\n    }\n  }\n\n  render() {\n    var pts = this.state.points.map((x, idx) => {\n      return React.createElement(\"circle\", {\n        key: \"point\" + idx,\n        id: \"point\" + idx,\n        cx: x.x,\n        cy: x.y,\n        r: \"12\",\n        stroke: \"black\",\n        onClick: event => this.drawLine(event, idx),\n        strokeWidth: \".5\",\n        style: {\n          fill: \"orange\",\n          zIndex: '1',\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      });\n    });\n    var ptsidx = this.state.points.map((pt, idx) => {\n      return React.createElement(\"text\", {\n        key: \"index\" + idx,\n        id: \"index\" + idx,\n        fontSize: \"12\",\n        fontFamily: \"Arial\",\n        x: pt.x - 4,\n        y: pt.y + 4,\n        onClick: event => this.drawLine(event, idx),\n        style: {\n          zIndex: '1',\n          fill: \"#fff\",\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, idx);\n    });\n    var lines = this.state.edges.map((q, idx) => {\n      return React.createElement(\"line\", {\n        key: \"edge\" + idx,\n        id: \"edge\" + idx,\n        x1: this.state.points[q.u].x,\n        y1: this.state.points[q.u].y,\n        x2: this.state.points[q.v].x,\n        y2: this.state.points[q.v].y,\n        style: {\n          stroke: 'rgb(255,0,0)',\n          strokeWidth: '2',\n          zIndex: '-1',\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      paintOrder: \"markers\",\n      ref: \"svg\",\n      width: window.innerWidth,\n      height: \"400\",\n      style: {\n        backgroundColor: 'rgb(230, 230, 230)'\n      },\n      onClick: event => this.getMousePosition(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, pts, ptsidx, lines), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.bfs(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"BFS\"), React.createElement(\"button\", {\n      onClick: () => this.dfs(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"DFS\"));\n  }\n\n}\nexport default Canvas;","map":{"version":3,"sources":["H:/React/Graph/graph-algorithm-visualizer/src/components/canvas.js"],"names":["React","Component","v1","v2","adj","delay","Canvas","constructor","props","state","points","edges","getMousePosition","event","x","clientX","y","clientY","refs","svg","style","marginTop","i","length","x1","y1","dist","setState","prev","push","forceUpdate","drawLine","e","idx","u","document","getElementById","fill","v","vertex","edgeNo","bfsAnimations","s","animations","vis","queue","shift","color","bfs","len","setTimeout","stroke","dfsutil","dfsAnimations","dfs","render","pts","map","zIndex","transition","ptsidx","pt","lines","q","strokeWidth","window","innerWidth","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nlet v1=null,v2=null;\r\nlet adj=[]\r\nvar delay=1000\r\nexport class Canvas extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             points:[],\r\n             edges:[]\r\n        }\r\n    }\r\n    \r\n    getMousePosition(event) { \r\n        let x = event.clientX;//this.refs.svg.style.marginLeft ;\r\n        let y = event.clientY-this.refs.svg.style.marginTop ;\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            let x1=this.state.points[i].x;\r\n            let y1=this.state.points[i].y;\r\n            let dist=(x-x1)*(x-x1)+(y-y1)*(y-y1);\r\n            if(dist<=600)\r\n            {\r\n//                this.drawLine(event);\r\n                return;\r\n            }\r\n        }\r\n        this.setState((prev)=>{\r\n            points:prev.points.push({\r\n                x:x,\r\n                y:y\r\n            })\r\n        },function(){\r\n            adj.push([])\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    drawLine(e,idx){\r\n        let u=document.getElementById(`point${idx}`);\r\n        u.style.fill='red';\r\n        if(v1===null)\r\n        v1=idx;\r\n        else {\r\n            v2=idx;\r\n            u=document.getElementById(`point${v1}`);\r\n            u.style.fill='orange';\r\n            u=document.getElementById(`point${v2}`);\r\n            u.style.fill='orange';\r\n            for(let i=0;i<this.state.edges.length;i++)\r\n            {\r\n                if(this.state.edges[i].u===v1 && this.state.edges[i].v===v2)\r\n                {   v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n                else if(this.state.edges[i].u===v2 && this.state.edges[i].v===v1)\r\n                {\r\n                    v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n            }\r\n            this.setState((prev)=>{\r\n                edges:prev.edges.push({\r\n                    u:v1,\r\n                    v:v2\r\n                })\r\n            },function(){\r\n                adj[v1].push({vertex:v2,edgeNo:this.state.edges.length-1})\r\n                adj[v2].push({vertex:v1,edgeNo:this.state.edges.length-1})\r\n                v1=null\r\n                v2=null\r\n            })\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n    //BFS TRAVERSAL OF GRAPH\r\n    bfsAnimations(s){\r\n        let animations=[]\r\n        let vis=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            vis[i]=false\r\n        }\r\n        let queue=[]\r\n        queue.push(s)\r\n        vis[s]=true;\r\n        while(queue.length!==0)\r\n        {\r\n            var x=queue[0]\r\n            queue.shift()\r\n            animations.push({\r\n                x:x,\r\n                y:-1,\r\n                color:'green'\r\n            })\r\n            for(let i=0;i<adj[x].length;i++)\r\n            {\r\n                if(vis[adj[x][i].vertex]===false)\r\n                {\r\n                    vis[adj[x][i].vertex]=true;\r\n                    queue.push(adj[x][i].vertex)\r\n                    animations.push({\r\n                        x:adj[x][i].edgeNo,\r\n                        y:-1,\r\n                        color:'edge'\r\n                    })\r\n                    animations.push({\r\n                        x:adj[x][i].vertex,\r\n                        y:-1,\r\n                        color:'blue'\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        return animations\r\n    }\r\n\r\n    bfs(s){\r\n        const animations=this.bfsAnimations(s)\r\n        let len=animations.length\r\n        for(let i=0;i<len;i++)\r\n        {\r\n            if(animations[i].color==='edge')\r\n            {\r\n                let x1=document.getElementById(`edge${animations[i].x}`)\r\n                setTimeout(() => {\r\n                    x1.style.stroke='blue'\r\n                }, i*delay);\r\n            }\r\n            else\r\n            {\r\n                    let x=document.getElementById(`point${animations[i].x}`)\r\n                    setTimeout(() => {\r\n                        x.style.fill=animations[i].color\r\n                    }, i*delay);\r\n            }\r\n        }\r\n    }\r\n\r\n    //DFS ALGORITHM\r\n    dfsutil(s,vis,animations){\r\n        animations.push({\r\n            x:s,\r\n            y:-1,\r\n            color:'green'\r\n        })\r\n        for(let i=0;i<adj[s].length;i++)\r\n        {\r\n            if(!vis[adj[s][i].vertex])\r\n            {\r\n                vis[adj[s][i].vertex]=true\r\n                animations.push({\r\n                    x:adj[s][i].edgeNo,\r\n                    y:-1,\r\n                    color:'edge'\r\n                })\r\n                animations.push({\r\n                    x:adj[s][i].vertex,\r\n                    y:-1,\r\n                    color:'blue'\r\n                })\r\n            }\r\n            this.dfsutil(adj[s][i].vertex,vis,animations)\r\n        }\r\n    }\r\n\r\n    dfsAnimations(s){\r\n        var animations=[]\r\n        let vis=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            vis[i]=false\r\n        }\r\n        this.dfsutil(s,vis,animations)\r\n        return animations\r\n    }\r\n\r\n    dfs(){\r\n        const animations=this.dfsAnimations(s)\r\n        let len=animations.length\r\n        for(let i=0;i<len;i++)\r\n        {\r\n            if(animations[i].color==='edge')\r\n            {\r\n                let x1=document.getElementById(`edge${animations[i].x}`)\r\n                setTimeout(() => {\r\n                    x1.style.stroke='blue'\r\n                }, i*delay);\r\n            }\r\n            else\r\n            {\r\n                    let x=document.getElementById(`point${animations[i].x}`)\r\n                    setTimeout(() => {\r\n                        x.style.fill=animations[i].color\r\n                    }, i*delay);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        var pts=this.state.points.map((x,idx)=>{\r\n            return(\r\n            <circle key={\"point\"+idx} id={\"point\"+idx} cx={x.x} cy={x.y} r=\"12\" stroke=\"black\" onClick={(event)=>this.drawLine(event,idx)} strokeWidth=\".5\" style={{fill:\"orange\",zIndex:'1',transition:'all .2s linear'}} />\r\n            )\r\n        })\r\n        var ptsidx=this.state.points.map((pt,idx)=>{\r\n            return(\r\n                <text  key={\"index\"+idx} id={\"index\"+idx} fontSize=\"12\" fontFamily=\"Arial\" x={pt.x-4} y={pt.y+4} onClick={(event)=>this.drawLine(event,idx)} style={{zIndex:'1',fill:\"#fff\",transition:'all .2s linear'}}>{idx}</text>\r\n            )\r\n        })\r\n        var lines=this.state.edges.map((q,idx)=>{\r\n            return(\r\n                <line key={\"edge\"+idx} id={\"edge\"+idx} x1={this.state.points[q.u].x} y1={this.state.points[q.u].y} x2={this.state.points[q.v].x} y2={this.state.points[q.v].y} style={{stroke:'rgb(255,0,0)',strokeWidth:'2',zIndex:'-1',transition:'all .2s linear'}} />\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n            <svg paintOrder='markers' ref='svg' width={window.innerWidth} height=\"400\" style={{backgroundColor: 'rgb(230, 230, 230)'}} onClick={(event)=>this.getMousePosition(event)}>\r\n            {pts}\r\n            {ptsidx}\r\n            {lines}\r\n            </svg>\r\n            <br/>\r\n            <button onClick={()=>this.bfs(0)}>BFS</button>\r\n            <button onClick={()=>this.dfs(0)}>DFS</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas\r\n"]},"metadata":{},"sourceType":"module"}