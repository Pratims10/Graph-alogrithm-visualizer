{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\Graph\\\\graph-algorithm-visualizer\\\\src\\\\components\\\\canvas.js\";\nimport React, { Component } from 'react';\nexport class Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [],\n      varline: ''\n    };\n  }\n\n  getMousePosition(event) {\n    let x = event.clientX; //this.refs.svg.style.marginLeft ;\n\n    let y = event.clientY - this.refs.svg.style.marginTop;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      let x1 = this.state.points[i].x;\n      let y1 = this.state.points[i].y;\n      let dist = (x - x1) * (x - x1) + (y - y1) * (y - y1);\n\n      if (dist <= 500) {\n        //                this.drawLine(event);\n        return;\n      }\n    }\n\n    this.setState(prev => {\n      points: prev.points.push({\n        x: x,\n        y: y\n      });\n    });\n    this.forceUpdate();\n  }\n\n  drawLine(e, idx) {\n    let x = `<line x1=${0} y1=${0} x2=\"200\" y2=\"200\" style={{stroke:'rgb(255,0,0)',strokeWidth:'2'}} />`;\n    this.setState({\n      varline: x\n    });\n    let u = document.getElementById(`point${idx}`);\n    console.log(u);\n    u.fill = 'red';\n    console.log(u);\n    this.forceUpdate();\n  }\n\n  render() {\n    var pts = this.state.points.map((x, idx) => {\n      return React.createElement(\"circle\", {\n        key: \"point\" + idx,\n        id: \"point\" + idx,\n        cx: x.x,\n        cy: x.y,\n        r: \"10\",\n        stroke: \"black\",\n        onClick: event => this.drawLine(event, idx),\n        strokeWidth: \"1\",\n        fill: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    });\n    var ptsidx = this.state.points.map((x, idx) => {\n      return React.createElement(\"text\", {\n        fill: \"#fff\",\n        key: \"index\" + idx,\n        id: \"index\" + idx,\n        fontSize: \"10\",\n        fontFamily: \"Arial\",\n        x: x.x - 4,\n        y: x.y + 4,\n        onClick: event => this.drawLine(event, idx),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, idx);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      ref: \"svg\",\n      className: \"svgStyles\",\n      width: window.innerWidth,\n      height: \"400\",\n      style: {\n        backgroundColor: 'rgb(215, 201, 248)'\n      },\n      onClick: event => this.getMousePosition(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, pts, ptsidx, this.state.varline));\n  }\n\n}\nexport default Canvas;","map":{"version":3,"sources":["H:/React/Graph/graph-algorithm-visualizer/src/components/canvas.js"],"names":["React","Component","Canvas","constructor","props","state","points","varline","getMousePosition","event","x","clientX","y","clientY","refs","svg","style","marginTop","i","length","x1","y1","dist","setState","prev","push","forceUpdate","drawLine","e","idx","u","document","getElementById","console","log","fill","render","pts","map","ptsidx","window","innerWidth","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Canvas extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             points:[],\r\n             varline:''\r\n        }\r\n    }\r\n    \r\n    getMousePosition(event) { \r\n        let x = event.clientX;//this.refs.svg.style.marginLeft ;\r\n        let y = event.clientY-this.refs.svg.style.marginTop ;\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            let x1=this.state.points[i].x;\r\n            let y1=this.state.points[i].y;\r\n            let dist=(x-x1)*(x-x1)+(y-y1)*(y-y1);\r\n            if(dist<=500)\r\n            {\r\n//                this.drawLine(event);\r\n                return;\r\n            }\r\n        }\r\n        this.setState((prev)=>{\r\n            points:prev.points.push({\r\n                x:x,\r\n                y:y\r\n            })\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    drawLine(e,idx){\r\n        let x=`<line x1=${0} y1=${0} x2=\"200\" y2=\"200\" style={{stroke:'rgb(255,0,0)',strokeWidth:'2'}} />`\r\n        this.setState({\r\n            varline:x\r\n        })\r\n        let u=document.getElementById(`point${idx}`);\r\n        console.log(u);\r\n        u.fill='red';\r\n        console.log(u);\r\n        this.forceUpdate();\r\n    }\r\n    render() {\r\n        var pts=this.state.points.map((x,idx)=>{\r\n            return(\r\n            <circle key={\"point\"+idx} id={\"point\"+idx} cx={x.x} cy={x.y} r=\"10\" stroke=\"black\" onClick={(event)=>this.drawLine(event,idx)} strokeWidth=\"1\" fill=\"green\"  />\r\n            )\r\n        })\r\n        var ptsidx=this.state.points.map((x,idx)=>{\r\n            return(\r\n                <text fill=\"#fff\" key={\"index\"+idx} id={\"index\"+idx} fontSize=\"10\" fontFamily=\"Arial\" x={x.x-4} y={x.y+4} onClick={(event)=>this.drawLine(event,idx)}>{idx}</text>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n            <svg ref='svg' className=\"svgStyles\" width={window.innerWidth} height=\"400\" style={{backgroundColor: 'rgb(215, 201, 248)'}} onClick={(event)=>this.getMousePosition(event)}>\r\n            {pts}\r\n            {ptsidx}\r\n            {this.state.varline}\r\n            </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas\r\n"]},"metadata":{},"sourceType":"module"}