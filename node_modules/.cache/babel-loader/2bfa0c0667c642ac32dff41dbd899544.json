{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\Graph\\\\graph-algorithm-visualizer\\\\src\\\\components\\\\MST.js\";\nimport React, { Component } from 'react';\nimport './graph.css';\nlet v1 = null,\n    v2 = null;\nlet adj = [];\nvar delay = 500;\nlet weights = [];\nvar r = 14;\nvar INT_MAX = 100000;\nlet parent = [];\nlet color1 = 'rgb(0, 204, 0)';\nlet done = false;\nlet timeouts = [];\nexport class MST extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [],\n      edges: []\n    };\n  }\n\n  componentDidMount() {//        this.generateRandomGraph()\n  }\n\n  randomWeights() {\n    for (let i = 0; i < this.state.edges.length; i++) weights[i] = getRandomInt(1, 50);\n\n    this.reset();\n    this.forceUpdate();\n  }\n\n  addWeights() {\n    weights.push(getRandomInt(1, 50));\n    this.forceUpdate();\n  }\n\n  getMousePosition(event) {\n    this.reset();\n    done = false;\n    let x = event.clientX - this.refs.svg.getBoundingClientRect().left;\n    let y = event.clientY - this.refs.svg.getBoundingClientRect().top;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      let x1 = this.state.points[i].x;\n      let y1 = this.state.points[i].y;\n      let dist = (x - x1) * (x - x1) + (y - y1) * (y - y1);\n      if (dist <= 1000) return false;\n    }\n\n    this.setState(prev => {\n      points: prev.points.push({\n        x: x,\n        y: y\n      });\n    }, function () {\n      adj.push([]);\n    });\n    this.forceUpdate();\n  }\n\n  drawLine(idx) {\n    this.reset();\n    done = false;\n    let u = document.getElementById(`point${idx}`);\n    u.style.fill = 'red';\n    if (v1 === null) v1 = idx;else {\n      v2 = idx;\n      u = document.getElementById(`point${v1}`);\n      u.style.fill = '#000';\n      u = document.getElementById(`point${v2}`);\n      u.style.fill = '#000';\n\n      for (let i = 0; i < this.state.edges.length; i++) {\n        if (this.state.edges[i].u === v1 && this.state.edges[i].v === v2) {\n          v1 = null;\n          v2 = null;\n          return;\n        } else if (this.state.edges[i].u === v2 && this.state.edges[i].v === v1) {\n          v1 = null;\n          v2 = null;\n          return;\n        }\n      }\n\n      if (v1 === v2) {\n        v1 = null;\n        v2 = null;\n        return;\n      }\n\n      this.setState(prev => {\n        edges: prev.edges.push({\n          u: v1,\n          v: v2\n        });\n      }, function () {\n        this.addWeights();\n        adj[v1].push({\n          vertex: v2,\n          edgeNo: this.state.edges.length - 1\n        });\n        adj[v2].push({\n          vertex: v1,\n          edgeNo: this.state.edges.length - 1\n        });\n        v1 = null;\n        v2 = null;\n      });\n      this.forceUpdate();\n    }\n  }\n\n  reset() {\n    done = false;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      if (document.getElementById(`point${i}`).style.fill !== 'red') document.getElementById(`point${i}`).style.fill = '#000';\n    }\n\n    for (let i = 0; i < this.state.edges.length; i++) {\n      document.getElementById(`edge${i}`).style.stroke = 'red';\n    }\n\n    parent = [];\n    this.forceUpdate();\n  }\n\n  clear() {\n    done = false;\n    this.setState({\n      points: [],\n      edges: []\n    }, function () {\n      v1 = null;\n      v2 = null;\n      adj = [];\n      weights = [];\n      parent = [];\n    });\n    this.forceUpdate();\n  } //DJIKSTRA'S SHORTEST PATH ALGORITHM\n\n\n  root(ar, x) {\n    let j = x;\n\n    while (ar[x] != x) {\n      x = ar[x];\n    }\n\n    ar[j] = x;\n    return x;\n  }\n\n  join(ar, size, a, b) {\n    let ra = this.root(ar, a);\n    let rb = this.root(ar, b);\n    if (ra == rb) return;\n\n    if (size[ra] < size[rb]) {\n      size[rb] += size[ra];\n      ar[ra] = rb;\n    } else {\n      size[ra] += size[rb];\n      ar[rb] = ra;\n    }\n  }\n\n  kruskalAnimations() {\n    this.reset();\n    let ar = []; //forming triplets\n\n    for (let i = 0; i < this.state.edges.length; i++) {\n      ar.push({\n        u: this.state.edges[i].u,\n        v: this.state.edges[i].v,\n        edge: {\n          wt: weights[i],\n          number: i\n        }\n      });\n    }\n\n    ar.sort(function (a, b) {\n      return a.wt < b.wt;\n    });\n    let vis = [];\n\n    for (let i = 0; i < this.state.points.length; i++) vis[i] = false;\n\n    let animations = [];\n    let arr = [];\n    let size = [];\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      arr[i] = i;\n      size[i] = 1;\n    }\n\n    for (let it = 0; it < ar.length; it++) {\n      animations.push({\n        edge: ar[it].edge.number,\n        x: -1,\n        y: -1,\n        color: 'test'\n      });\n\n      if (this.root(arr, ar[it].u) === this.root(arr, ar[it].v)) {\n        animations.push({\n          edge: ar[it].edge.number,\n          x: -1,\n          y: -1,\n          color: 'excluded'\n        });\n        continue;\n      }\n\n      this.join(arr, size, ar[it].u, ar[it].v);\n      animations.push({\n        edge: ar[it].edge.number,\n        x: ar[it].u,\n        y: ar[it].v,\n        color: 'included'\n      });\n    }\n\n    return animations;\n  }\n\n  kruskal() {\n    const animations = this.kruskalAnimations();\n    let len = animations.length;\n\n    for (let i = 0; i < len; i++) {\n      if (animations[i].color === 'test') {\n        let tm = setTimeout(() => {\n          let q = document.getElementById(`edge${animations[i].edge}`);\n          q.style.stroke = 'blue';\n          q.style.strokeWidth = '5';\n        }, i * delay);\n        timeouts.push(tm);\n      } else if (animations[i].color === 'excluded') {\n        let tm = setTimeout(() => {\n          let q = document.getElementById(`edge${animations[i].edge}`);\n          q.style.fill = 'blue';\n          q.style.strokeWidth = '2';\n        }, i * delay);\n        timeouts.push(tm);\n      } else {\n        let tm = setTimeout(() => {\n          let q = document.getElementById(`edge${animations[i].edge}`);\n          q.style.fill = color1;\n          q.style.strokeWidth = '2';\n          document.getElementById(`point${animations[i].u}`).style.fill = color1;\n          document.getElementById(`point${animations[i].v}`).style.fill = color1;\n        }, i * delay);\n        timeouts.push(tm);\n      }\n    }\n\n    done = true;\n  }\n\n  render() {\n    var pts = this.state.points.map((x, idx) => {\n      return React.createElement(\"circle\", {\n        key: \"point\" + idx,\n        id: \"point\" + idx,\n        cx: x.x,\n        cy: x.y,\n        r: r,\n        stroke: \"black\",\n        onClick: event => this.drawLine(idx),\n        strokeWidth: \"1.5\",\n        style: {\n          fill: \"#000\",\n          transition: 'all .2s linear',\n          cursor: 'pointer'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      });\n    });\n    var ptsidx = this.state.points.map((pt, idx) => {\n      return React.createElement(\"text\", {\n        key: \"index\" + idx,\n        id: \"index\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        x: pt.x - 4,\n        y: pt.y + 4,\n        onClick: event => this.drawLine(idx),\n        style: {\n          fill: \"#fff\",\n          transition: 'all .2s linear',\n          cursor: 'pointer'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, idx);\n    });\n    var lines = this.state.edges.map((q, idx) => {\n      return React.createElement(\"line\", {\n        key: \"edge\" + idx,\n        id: \"edge\" + idx,\n        x1: this.state.points[q.u].x,\n        y1: this.state.points[q.u].y,\n        x2: this.state.points[q.v].x,\n        y2: this.state.points[q.v].y,\n        style: {\n          stroke: 'red',\n          strokeWidth: '2',\n          zIndex: '-1',\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      });\n    });\n    var edgeWeights = this.state.edges.map((edge, idx) => {\n      return React.createElement(\"text\", {\n        key: \"weight\" + idx,\n        id: \"weight\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        fill: \"#000\",\n        x: (this.state.points[edge.u].x + this.state.points[edge.v].x) / 2.0,\n        y: (this.state.points[edge.u].y + this.state.points[edge.v].y) / 2.0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, weights[idx]);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button button4\",\n      onClick: () => this.kruskal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Kruskal's Algorithm\"), React.createElement(\"button\", {\n      className: \"button button4\",\n      onClick: () => this.randomWeights(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Randomize edge weights\"), React.createElement(\"button\", {\n      className: \"button button4\",\n      onClick: () => this.reset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      className: \"button button4\",\n      onClick: () => this.clear(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Clear Canvas\")), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      paintOrder: \"markers\",\n      ref: \"svg\",\n      width: window.innerWidth * .995,\n      height: window.innerHeight * .91,\n      style: {\n        border: '2px solid black',\n        backgroundColor: '#dddddd',\n        cursor: 'crosshair'\n      },\n      onClick: event => this.getMousePosition(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, edgeWeights, lines, pts, ptsidx)));\n  }\n\n}\nexport default MST;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","map":{"version":3,"sources":["H:/React/Graph/graph-algorithm-visualizer/src/components/MST.js"],"names":["React","Component","v1","v2","adj","delay","weights","r","INT_MAX","parent","color1","done","timeouts","MST","constructor","props","state","points","edges","componentDidMount","randomWeights","i","length","getRandomInt","reset","forceUpdate","addWeights","push","getMousePosition","event","x","clientX","refs","svg","getBoundingClientRect","left","y","clientY","top","x1","y1","dist","setState","prev","drawLine","idx","u","document","getElementById","style","fill","v","vertex","edgeNo","stroke","clear","root","ar","j","join","size","a","b","ra","rb","kruskalAnimations","edge","wt","number","sort","vis","animations","arr","it","color","kruskal","len","tm","setTimeout","q","strokeWidth","render","pts","map","transition","cursor","ptsidx","pt","lines","zIndex","edgeWeights","window","innerWidth","innerHeight","border","backgroundColor","min","max","Math","ceil","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './graph.css'\r\nlet v1=null,v2=null\r\nlet adj=[]\r\nvar delay=500\r\nlet weights=[]\r\nvar r=14\r\nvar INT_MAX=100000\r\nlet parent=[]\r\nlet color1='rgb(0, 204, 0)';\r\nlet done=false\r\nlet timeouts=[]\r\nexport class MST extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             points:[],\r\n             edges:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n//        this.generateRandomGraph()\r\n    }\r\n    randomWeights(){\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        weights[i]=getRandomInt(1,50);\r\n        this.reset()\r\n        this.forceUpdate();\r\n    }\r\n    addWeights()\r\n    {\r\n        weights.push(getRandomInt(1,50))\r\n        this.forceUpdate()\r\n    }\r\n    getMousePosition(event)\r\n    {\r\n        this.reset()\r\n        done=false\r\n        let x = event.clientX-this.refs.svg.getBoundingClientRect().left ;\r\n        let y = event.clientY-this.refs.svg.getBoundingClientRect().top;\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            let x1=this.state.points[i].x;\r\n            let y1=this.state.points[i].y;\r\n            let dist=(x-x1)*(x-x1)+(y-y1)*(y-y1);\r\n            if(dist<=1000)\r\n                return false;\r\n        }\r\n        this.setState((prev)=>{\r\n            points:prev.points.push({x:x,y:y})\r\n        },function(){\r\n            adj.push([])\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    drawLine(idx){\r\n        this.reset()\r\n        done=false\r\n        let u=document.getElementById(`point${idx}`);\r\n        u.style.fill='red';\r\n        if(v1===null)\r\n        v1=idx;\r\n        else {\r\n            v2=idx;\r\n            u=document.getElementById(`point${v1}`);\r\n            u.style.fill='#000';\r\n            u=document.getElementById(`point${v2}`);\r\n            u.style.fill='#000';\r\n            for(let i=0;i<this.state.edges.length;i++)\r\n            {\r\n                if(this.state.edges[i].u===v1 && this.state.edges[i].v===v2)\r\n                {   v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n                else if(this.state.edges[i].u===v2 && this.state.edges[i].v===v1)\r\n                {\r\n                    v1=null\r\n                    v2=null\r\n                    return\r\n                }\r\n            }\r\n            if(v1===v2)\r\n            {\r\n                v1=null\r\n                v2=null\r\n                return\r\n            }\r\n            this.setState((prev)=>{\r\n                edges:prev.edges.push({\r\n                    u:v1,\r\n                    v:v2\r\n                })\r\n            },function(){\r\n                this.addWeights()\r\n                adj[v1].push({vertex:v2,edgeNo:this.state.edges.length-1})\r\n                adj[v2].push({vertex:v1,edgeNo:this.state.edges.length-1})\r\n                v1=null\r\n                v2=null\r\n            })\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        done=false\r\n        for(let i=0;i<this.state.points.length;i++){\r\n            if(document.getElementById(`point${i}`).style.fill!=='red')\r\n            document.getElementById(`point${i}`).style.fill='#000'\r\n        }\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        {\r\n            document.getElementById(`edge${i}`).style.stroke='red'\r\n        }\r\n        parent=[]\r\n        this.forceUpdate();\r\n    }\r\n    clear(){\r\n        done=false\r\n        this.setState({\r\n            points:[],\r\n            edges:[]\r\n        },function(){\r\n            v1=null\r\n            v2=null\r\n            adj=[]\r\n            weights=[]\r\n            parent=[]\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    //DJIKSTRA'S SHORTEST PATH ALGORITHM\r\n    root(ar,x){\r\n        let j=x\r\n        while(ar[x]!=x)\r\n        {\r\n            x=ar[x]\r\n        }\r\n        ar[j]=x\r\n        return x\r\n    }\r\n    join(ar,size,a,b){\r\n        let ra=this.root(ar,a)\r\n        let rb=this.root(ar,b)\r\n        if(ra==rb) return\r\n        if(size[ra]<size[rb]){\r\n            size[rb]+=size[ra]\r\n            ar[ra]=rb\r\n        }\r\n        else{\r\n            size[ra]+=size[rb]\r\n            ar[rb]=ra\r\n        }\r\n    }\r\n    kruskalAnimations(){\r\n        this.reset()\r\n        let ar=[]\r\n        //forming triplets\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        {\r\n            ar.push({\r\n                u:this.state.edges[i].u,\r\n                v:this.state.edges[i].v,\r\n                edge:{\r\n                    wt:weights[i],\r\n                    number:i\r\n                }\r\n            })\r\n        }\r\n        ar.sort(function(a,b){\r\n            return a.wt<b.wt\r\n        })\r\n        let vis=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        vis[i]=false;\r\n        let animations=[]\r\n        let arr=[]\r\n        let size=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            arr[i]=i\r\n            size[i]=1\r\n        }\r\n        for(let it=0;it<ar.length;it++)\r\n        {\r\n            animations.push({\r\n                edge:ar[it].edge.number,\r\n                x:-1,\r\n                y:-1,\r\n                color:'test'\r\n            })\r\n            if(this.root(arr,ar[it].u)===this.root(arr,ar[it].v)){\r\n                animations.push({\r\n                    edge:ar[it].edge.number,\r\n                    x:-1,\r\n                    y:-1,\r\n                    color:'excluded'\r\n                })\r\n                continue\r\n            }\r\n            this.join(arr,size,ar[it].u,ar[it].v)\r\n            animations.push({\r\n                edge:ar[it].edge.number,\r\n                x:ar[it].u,\r\n                y:ar[it].v,\r\n                color:'included'\r\n            })\r\n        }\r\n        return animations\r\n    }\r\n\r\n    kruskal(){\r\n        const animations=this.kruskalAnimations()\r\n        let len=animations.length\r\n        for(let i=0;i<len;i++)\r\n        {\r\n            if(animations[i].color==='test'){\r\n                let tm=setTimeout(() => {\r\n                    let q=document.getElementById(`edge${animations[i].edge}`)\r\n                    q.style.stroke='blue'\r\n                    q.style.strokeWidth='5'\r\n                    }, i*delay);\r\n                timeouts.push(tm)\r\n            }\r\n            else if(animations[i].color==='excluded')\r\n            {\r\n                let tm=setTimeout(() => {\r\n                    let q=document.getElementById(`edge${animations[i].edge}`)\r\n                    q.style.fill='blue'\r\n                    q.style.strokeWidth='2'\r\n                }, i*delay);\r\n                timeouts.push(tm);\r\n            }\r\n            else\r\n            {\r\n                let tm=setTimeout(() => {\r\n                    let q=document.getElementById(`edge${animations[i].edge}`)\r\n                    q.style.fill=color1\r\n                    q.style.strokeWidth='2'\r\n                    document.getElementById(`point${animations[i].u}`).style.fill=color1\r\n                    document.getElementById(`point${animations[i].v}`).style.fill=color1\r\n                }, i*delay);\r\n                timeouts.push(tm);\r\n            }\r\n        }\r\n        done=true\r\n    }\r\n    render() {\r\n        var pts=this.state.points.map((x,idx)=>{\r\n            return(\r\n            <circle key={\"point\"+idx} id={\"point\"+idx} cx={x.x} cy={x.y} r={r} stroke=\"black\" onClick={(event)=>this.drawLine(idx)} strokeWidth=\"1.5\" style={{fill:\"#000\",transition:'all .2s linear',cursor:'pointer'}}/>\r\n            )\r\n        })\r\n        var ptsidx=this.state.points.map((pt,idx)=>{\r\n            return(\r\n                <text key={\"index\"+idx} id={\"index\"+idx} fontSize=\"14\" fontFamily=\"Arial\" x={pt.x-4} y={pt.y+4} onClick={(event)=>this.drawLine(idx)} style={{fill:\"#fff\",transition:'all .2s linear',cursor:'pointer'}} >{idx}</text>\r\n            )\r\n        })\r\n        var lines=this.state.edges.map((q,idx)=>{\r\n            return(\r\n                <line key={\"edge\"+idx} id={\"edge\"+idx} x1={this.state.points[q.u].x} y1={this.state.points[q.u].y} x2={this.state.points[q.v].x} y2={this.state.points[q.v].y} style={{stroke:'red',strokeWidth:'2',zIndex:'-1',transition:'all .2s linear'}} />\r\n            )\r\n        })\r\n        var edgeWeights=this.state.edges.map((edge,idx)=>{\r\n            return(\r\n                <text key={\"weight\"+idx} id={\"weight\"+idx} fontSize=\"14\" fontFamily=\"Arial\" fill=\"#000\" x={(this.state.points[edge.u].x+this.state.points[edge.v].x)/2.0} y={(this.state.points[edge.u].y+this.state.points[edge.v].y)/2.0} >{weights[idx]}</text>\r\n            )\r\n        })\r\n        \r\n        return (\r\n        <div>\r\n            <center>\r\n            <button className=\"button button4\" onClick={()=>this.kruskal()}>Kruskal's Algorithm</button>\r\n            <button className=\"button button4\" onClick={()=>this.randomWeights()}>Randomize edge weights</button>\r\n            <button className=\"button button4\" onClick={()=>this.reset()}>Reset</button>\r\n            <button className=\"button button4\" onClick={()=>this.clear()}>Clear Canvas</button>\r\n            </center>\r\n            <center>\r\n            <svg paintOrder='markers' ref='svg' width={window.innerWidth*.995} height={window.innerHeight*.91} style={{border:'2px solid black',backgroundColor:'#dddddd',cursor:'crosshair'}} onClick={(event)=>this.getMousePosition(event)}>\r\n            {edgeWeights}\r\n            {lines}\r\n            {pts}\r\n            {ptsidx}\r\n            </svg>\r\n            </center>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MST\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}"]},"metadata":{},"sourceType":"module"}