{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\Graph\\\\graph-algorithm-visualizer\\\\src\\\\components\\\\ShortestPath.js\";\nimport React, { Component } from 'react';\nlet v1 = null,\n    v2 = null;\nlet adj = [];\nvar delay = 1000;\nlet weights = [];\nvar r = 14;\nvar INT_MAX = 100000;\nvar color1 = 'rgb(0, 204, 0)';\nexport class ShortestPath extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [],\n      edges: [],\n      dist: []\n    };\n  }\n\n  randomWeights() {\n    console.log(this.state.edges.length);\n\n    for (let i = 0; i < this.state.edges.length; i++) weights[i] = getRandomInt(1, 50);\n\n    this.forceUpdate();\n  }\n\n  addWeights() {\n    weights.push(getRandomInt(1, 50));\n    this.forceUpdate();\n  }\n\n  getMousePosition(event) {\n    let x = event.clientX; //this.refs.svg.style.marginLeft ;\n\n    let y = event.clientY - this.refs.svg.style.marginTop;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      let x1 = this.state.points[i].x;\n      let y1 = this.state.points[i].y;\n      let dist = (x - x1) * (x - x1) + (y - y1) * (y - y1);\n\n      if (dist <= 900) {\n        //                this.drawLine(event);\n        return;\n      }\n    }\n\n    this.setState(prev => {\n      dist: prev.dist.push(100000);\n    });\n    this.setState(prev => {\n      points: prev.points.push({\n        x: x,\n        y: y\n      });\n    }, function () {\n      adj.push([]);\n    });\n    this.forceUpdate();\n  }\n\n  drawLine(e, idx) {\n    let u = document.getElementById(`point${idx}`);\n    u.style.fill = 'red';\n    if (v1 === null) v1 = idx;else {\n      v2 = idx;\n      u = document.getElementById(`point${v1}`);\n      u.style.fill = 'orange';\n      u = document.getElementById(`point${v2}`);\n      u.style.fill = 'orange';\n\n      for (let i = 0; i < this.state.edges.length; i++) {\n        if (this.state.edges[i].u === v1 && this.state.edges[i].v === v2) {\n          v1 = null;\n          v2 = null;\n          return;\n        } else if (this.state.edges[i].u === v2 && this.state.edges[i].v === v1) {\n          v1 = null;\n          v2 = null;\n          return;\n        }\n      }\n\n      if (v1 === v2) {\n        v1 = null;\n        v2 = null;\n        return;\n      }\n\n      this.setState(prev => {\n        edges: prev.edges.push({\n          u: v1,\n          v: v2\n        });\n      }, function () {\n        this.addWeights();\n        adj[v1].push({\n          vertex: v2,\n          edgeNo: this.state.edges.length - 1\n        });\n        adj[v2].push({\n          vertex: v1,\n          edgeNo: this.state.edges.length - 1\n        });\n        v1 = null;\n        v2 = null;\n      });\n      this.forceUpdate();\n    }\n  }\n\n  reset() {\n    for (let i = 0; i < this.state.points.length; i++) {\n      document.getElementById(`point${i}`).style.fill = 'orange';\n    }\n\n    for (let i = 0; i < this.state.edges.length; i++) {\n      document.getElementById(`edge${i}`).style.stroke = 'red';\n    }\n\n    let arr = [];\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      arr[i] = 100000;\n    }\n\n    this.setState({\n      dist: arr\n    });\n    this.forceUpdate();\n  }\n\n  clear() {\n    this.setState({\n      points: [],\n      edges: [],\n      dist: []\n    }, function () {\n      v1 = null;\n      v2 = null;\n      adj = [];\n      weights = [];\n    });\n    this.forceUpdate();\n  } //DJIKSTRA'S SHORTEST PATH ALGORITHM\n\n\n  minDist(dist, sptSet) {\n    // Initialize min value \n    let min = INT_MAX,\n        min_index;\n\n    for (let v = 0; v < this.state.points.length; v++) if (sptSet[v] == false && dist[v] <= min) {\n      min = dist[v];\n      min_index = v;\n    }\n\n    return min_index;\n  }\n\n  dijkstraAnimations(s) {\n    let ar = [];\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      ar.push([]);\n\n      for (let j = 0; j < this.state.points.length; j++) ar[i].push(0);\n    } //forming adj matrix\n\n\n    for (let i = 0; i < this.state.edges.length; i++) {\n      ar[this.state.edges[i].u][this.state.edges[i].v] = weights[i];\n      ar[this.state.edges[i].v][this.state.edges[i].u] = weights[i];\n    }\n\n    let vis = [];\n\n    for (let i = 0; i < this.state.points.length; i++) vis[i] = false;\n\n    let animations = [];\n    let dist = this.state.dist;\n    dist[s] = 0;\n    animations.push({\n      x: s,\n      y: 0,\n      color: 'setdist'\n    });\n\n    for (let it = 0; it < this.state.points.length - 1; it++) {\n      let u = this.minDist(dist, vis);\n      vis[u] = true;\n      animations.push({\n        x: u,\n        y: -1,\n        color: 'confirmdist'\n      });\n\n      for (let v = 0; v < this.state.points.length; v++) {\n        if (!vis[v] && ar[u][v] && dist[u] + ar[u][v] < dist[v]) {\n          dist[v] = dist[u] + ar[u][v];\n          animations.push({\n            x: v,\n            y: dist[v],\n            color: 'setdist'\n          });\n        }\n      }\n    }\n\n    return animations;\n  }\n\n  dijkstra(s) {\n    if (s >= this.state.points.length) return;\n    const animations = this.dijkstraAnimations(s);\n    let len = animations.length;\n\n    for (let i = 0; i < len; i++) {\n      if (animations[i].color === 'setdist') {\n        setTimeout(() => {\n          let q = document.getElementById(`point${animations[i].x}`);\n          q.style.fill = 'blue';\n          q = document.getElementById(`dist${animations[i].x}`);\n          q.textContent = animations[i].y;\n        }, i * delay);\n      } else {\n        setTimeout(() => {\n          let q = document.getElementById(`point${animations[i].x}`);\n          q.style.fill = color1;\n        }, i * delay);\n      }\n    }\n  }\n\n  render() {\n    var pts = this.state.points.map((x, idx) => {\n      return React.createElement(\"circle\", {\n        key: \"point\" + idx,\n        id: \"point\" + idx,\n        cx: x.x,\n        cy: x.y,\n        r: r,\n        stroke: \"black\",\n        onClick: event => this.drawLine(event, idx),\n        strokeWidth: \".5\",\n        style: {\n          fill: \"orange\",\n          zIndex: '1',\n          transition: 'all .2s linear',\n          cursor: 'pointer'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      });\n    });\n    var ptsidx = this.state.points.map((pt, idx) => {\n      return React.createElement(\"text\", {\n        key: \"index\" + idx,\n        id: \"index\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        x: pt.x - 4,\n        y: pt.y + 4,\n        onClick: event => this.drawLine(event, idx),\n        style: {\n          zIndex: '1',\n          fill: \"#fff\",\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, idx);\n    });\n    var lines = this.state.edges.map((q, idx) => {\n      return React.createElement(\"line\", {\n        key: \"edge\" + idx,\n        id: \"edge\" + idx,\n        x1: this.state.points[q.u].x,\n        y1: this.state.points[q.u].y,\n        x2: this.state.points[q.v].x,\n        y2: this.state.points[q.v].y,\n        style: {\n          stroke: 'red',\n          strokeWidth: '2',\n          zIndex: '-1',\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      });\n    });\n    var edgeWeights = this.state.edges.map((edge, idx) => {\n      return React.createElement(\"text\", {\n        key: \"weight\" + idx,\n        id: \"weight\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        fill: \"#000\",\n        x: (this.state.points[edge.u].x + this.state.points[edge.v].x) / 2.0,\n        y: (this.state.points[edge.u].y + this.state.points[edge.v].y) / 2.0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, weights[idx]);\n    });\n    var dists = this.state.points.map((x, idx) => {\n      if (this.state.dist[idx] >= 100000) return React.createElement(\"text\", {\n        key: \"dist\" + idx,\n        id: \"dist\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        fill: \"#000\",\n        x: x.x + r + 2,\n        y: x.y + r + 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"\\u221E\");else return React.createElement(\"text\", {\n        key: \"dist\" + idx,\n        id: \"dist\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        fill: \"#000\",\n        x: x.x + r + 2,\n        y: x.y + r + 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, this.state.dist[idx]);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      paintOrder: \"markers\",\n      ref: \"svg\",\n      width: window.innerWidth,\n      height: \"400\",\n      style: {\n        border: '1px dotted black',\n        backgroundColor: 'rgb(251, 250, 255)',\n        cursor: 'crosshair'\n      },\n      onClick: event => this.getMousePosition(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, pts, ptsidx, lines, edgeWeights, dists), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.dijkstra(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Djikstra's Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.randomWeights(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Randomize edge weights\"), React.createElement(\"button\", {\n      onClick: () => this.reset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: () => this.clear(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Clear Canvas\"));\n  }\n\n}\nexport default ShortestPath;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","map":{"version":3,"sources":["H:/React/Graph/graph-algorithm-visualizer/src/components/ShortestPath.js"],"names":["React","Component","v1","v2","adj","delay","weights","r","INT_MAX","color1","ShortestPath","constructor","props","state","points","edges","dist","randomWeights","console","log","length","i","getRandomInt","forceUpdate","addWeights","push","getMousePosition","event","x","clientX","y","clientY","refs","svg","style","marginTop","x1","y1","setState","prev","drawLine","e","idx","u","document","getElementById","fill","v","vertex","edgeNo","reset","stroke","arr","clear","minDist","sptSet","min","min_index","dijkstraAnimations","s","ar","j","vis","animations","color","it","dijkstra","len","setTimeout","q","textContent","render","pts","map","zIndex","transition","cursor","ptsidx","pt","lines","strokeWidth","edgeWeights","edge","dists","window","innerWidth","border","backgroundColor","max","Math","ceil","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nlet v1=null,v2=null;\r\nlet adj=[]\r\nvar delay=1000\r\nlet weights=[]\r\nvar r=14\r\nvar INT_MAX=100000\r\nvar color1='rgb(0, 204, 0)';\r\nexport class ShortestPath extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             points:[],\r\n             edges:[],\r\n             dist:[]\r\n        }\r\n    }\r\n\r\n    randomWeights(){\r\n        console.log(this.state.edges.length)\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        weights[i]=getRandomInt(1,50);\r\n        this.forceUpdate();\r\n    }\r\n    addWeights()\r\n    {\r\n        weights.push(getRandomInt(1,50))\r\n        this.forceUpdate()\r\n    }\r\n        getMousePosition(event) { \r\n        let x = event.clientX;//this.refs.svg.style.marginLeft ;\r\n        let y = event.clientY-this.refs.svg.style.marginTop ;\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            let x1=this.state.points[i].x;\r\n            let y1=this.state.points[i].y;\r\n            let dist=(x-x1)*(x-x1)+(y-y1)*(y-y1);\r\n            if(dist<=900)\r\n            {\r\n//                this.drawLine(event);\r\n                return;\r\n            }\r\n        }\r\n        this.setState((prev)=>{\r\n            dist:prev.dist.push(100000)\r\n        })\r\n        this.setState((prev)=>{\r\n            points:prev.points.push({x:x,y:y})\r\n        },function(){\r\n            adj.push([])\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    drawLine(e,idx){\r\n        let u=document.getElementById(`point${idx}`);\r\n        u.style.fill='red';\r\n        if(v1===null)\r\n        v1=idx;\r\n        else {\r\n            v2=idx;\r\n            u=document.getElementById(`point${v1}`);\r\n            u.style.fill='orange';\r\n            u=document.getElementById(`point${v2}`);\r\n            u.style.fill='orange';\r\n            for(let i=0;i<this.state.edges.length;i++)\r\n            {\r\n                if(this.state.edges[i].u===v1 && this.state.edges[i].v===v2)\r\n                {   v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n                else if(this.state.edges[i].u===v2 && this.state.edges[i].v===v1)\r\n                {\r\n                    v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n            }\r\n            if(v1===v2)\r\n            {\r\n                v1=null\r\n                v2=null\r\n                return\r\n            }\r\n            this.setState((prev)=>{\r\n                edges:prev.edges.push({\r\n                    u:v1,\r\n                    v:v2\r\n                })\r\n            },function(){\r\n                this.addWeights()\r\n                adj[v1].push({vertex:v2,edgeNo:this.state.edges.length-1})\r\n                adj[v2].push({vertex:v1,edgeNo:this.state.edges.length-1})\r\n                v1=null\r\n                v2=null\r\n            })\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        for(let i=0;i<this.state.points.length;i++){\r\n            document.getElementById(`point${i}`).style.fill='orange'\r\n        }\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        {\r\n            document.getElementById(`edge${i}`).style.stroke='red'\r\n        }\r\n        let arr=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            arr[i]=100000\r\n        }\r\n        this.setState({\r\n            dist:arr\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n    clear(){\r\n        this.setState({\r\n            points:[],\r\n            edges:[],\r\n            dist:[]\r\n        },function(){\r\n            v1=null\r\n            v2=null\r\n            adj=[]\r\n            weights=[]\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    //DJIKSTRA'S SHORTEST PATH ALGORITHM\r\n    minDist(dist,sptSet) \r\n    {\r\n        // Initialize min value \r\n        let min = INT_MAX, min_index; \r\n        for (let v = 0; v < this.state.points.length; v++) \r\n            if (sptSet[v] == false && dist[v] <= min) \r\n                {\r\n                    min = dist[v]\r\n                    min_index = v;\r\n                }\r\n        return min_index;\r\n    }\r\n    dijkstraAnimations(s){\r\n        let ar=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            ar.push([])\r\n            for(let j=0;j<this.state.points.length;j++)\r\n            ar[i].push(0)\r\n        }\r\n        //forming adj matrix\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        {\r\n            ar[this.state.edges[i].u][this.state.edges[i].v]=weights[i]\r\n            ar[this.state.edges[i].v][this.state.edges[i].u]=weights[i]\r\n        }\r\n        let vis=[]\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        vis[i]=false;\r\n        let animations=[]\r\n        let dist=this.state.dist\r\n        dist[s]=0\r\n        animations.push({\r\n            x:s,\r\n            y:0,\r\n            color:'setdist'\r\n        })\r\n        for(let it=0;it<this.state.points.length-1;it++)\r\n        {\r\n            let u=this.minDist(dist,vis)\r\n            vis[u]=true\r\n            animations.push({\r\n                x:u,\r\n                y:-1,\r\n                color:'confirmdist'\r\n            })\r\n            for(let v=0;v<this.state.points.length;v++)\r\n            {\r\n                if(!vis[v] && ar[u][v] && dist[u]+ar[u][v]<dist[v])\r\n                {\r\n                    dist[v]=dist[u]+ar[u][v]\r\n                    animations.push({\r\n                        x:v,\r\n                        y:dist[v],\r\n                        color:'setdist'\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        return animations\r\n    }\r\n\r\n    dijkstra(s){\r\n        if(s>=this.state.points.length)\r\n        return;\r\n        const animations=this.dijkstraAnimations(s)\r\n        let len=animations.length\r\n        for(let i=0;i<len;i++)\r\n        {\r\n            if(animations[i].color==='setdist')\r\n            {\r\n                setTimeout(() => {\r\n                    let q=document.getElementById(`point${animations[i].x}`)\r\n                    q.style.fill='blue'\r\n                    q=document.getElementById(`dist${animations[i].x}`);\r\n                    q.textContent=animations[i].y\r\n                    \r\n                }, i*delay);\r\n            }\r\n            else\r\n            {\r\n                setTimeout(() => {\r\n                    let q=document.getElementById(`point${animations[i].x}`)\r\n                    q.style.fill=color1\r\n                }, i*delay);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        var pts=this.state.points.map((x,idx)=>{\r\n            return(\r\n            <circle key={\"point\"+idx} id={\"point\"+idx} cx={x.x} cy={x.y} r={r} stroke=\"black\" onClick={(event)=>this.drawLine(event,idx)} strokeWidth=\".5\" style={{fill:\"orange\",zIndex:'1',transition:'all .2s linear',cursor:'pointer'}} />\r\n            )\r\n        })\r\n        var ptsidx=this.state.points.map((pt,idx)=>{\r\n            return(\r\n                <text  key={\"index\"+idx} id={\"index\"+idx} fontSize=\"14\" fontFamily=\"Arial\" x={pt.x-4} y={pt.y+4} onClick={(event)=>this.drawLine(event,idx)} style={{zIndex:'1',fill:\"#fff\",transition:'all .2s linear'}}>{idx}</text>\r\n            )\r\n        })\r\n        var lines=this.state.edges.map((q,idx)=>{\r\n            return(\r\n                <line key={\"edge\"+idx} id={\"edge\"+idx} x1={this.state.points[q.u].x} y1={this.state.points[q.u].y} x2={this.state.points[q.v].x} y2={this.state.points[q.v].y} style={{stroke:'red',strokeWidth:'2',zIndex:'-1',transition:'all .2s linear'}} />\r\n            )\r\n        })\r\n        var edgeWeights=this.state.edges.map((edge,idx)=>{\r\n            return(\r\n                <text key={\"weight\"+idx} id={\"weight\"+idx} fontSize=\"14\" fontFamily=\"Arial\" fill=\"#000\" x={(this.state.points[edge.u].x+this.state.points[edge.v].x)/2.0} y={(this.state.points[edge.u].y+this.state.points[edge.v].y)/2.0} >{weights[idx]}</text>\r\n            )\r\n        })\r\n        var dists=this.state.points.map((x,idx)=>{\r\n            if(this.state.dist[idx]>=100000)\r\n            return(\r\n                <text key={\"dist\"+idx} id={\"dist\"+idx} fontSize='14' fontFamily='Arial' fill='#000' x={x.x+r+2} y={x.y+r+2}>&infin;</text>\r\n            )\r\n            else\r\n            return(\r\n                <text key={\"dist\"+idx} id={\"dist\"+idx} fontSize='14' fontFamily='Arial' fill='#000' x={x.x+r+2} y={x.y+r+2} >{this.state.dist[idx]}</text>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n            <svg paintOrder='markers' ref='svg' width={window.innerWidth} height=\"400\" style={{border:'1px dotted black',backgroundColor:'rgb(251, 250, 255)',cursor:'crosshair'}} onClick={(event)=>this.getMousePosition(event)}>\r\n            {pts}\r\n            {ptsidx}\r\n            {lines}\r\n            {edgeWeights}\r\n            {dists}\r\n            </svg>\r\n            <br/>\r\n            <button onClick={()=>this.dijkstra(0)}>Djikstra's Algorithm</button>\r\n            <button onClick={()=>this.randomWeights()}>Randomize edge weights</button>\r\n            <button onClick={()=>this.reset()}>Reset</button>\r\n            <button onClick={()=>this.clear()}>Clear Canvas</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShortestPath\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}"]},"metadata":{},"sourceType":"module"}