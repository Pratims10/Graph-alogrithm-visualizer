{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\Graph\\\\graph-algorithm-visualizer\\\\src\\\\components\\\\ShortestPath.js\";\nimport React, { Component } from 'react';\nlet v1 = null,\n    v2 = null;\nlet adj = [];\nvar delay = 1000;\nlet weights = [];\nexport class ShortestPath extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [],\n      edges: []\n    };\n  }\n\n  componentDidMount() {\n    this.randomWeights();\n  }\n\n  componentDidUpdate() {\n    this.randomWeights();\n  }\n\n  randomWeights() {\n    for (let i = 0; i < this.state.edges.length; i++) weights[i] = getRandomInt(1, 50);\n  }\n\n  getMousePosition(event) {\n    let x = event.clientX; //this.refs.svg.style.marginLeft ;\n\n    let y = event.clientY - this.refs.svg.style.marginTop;\n\n    for (let i = 0; i < this.state.points.length; i++) {\n      let x1 = this.state.points[i].x;\n      let y1 = this.state.points[i].y;\n      let dist = (x - x1) * (x - x1) + (y - y1) * (y - y1);\n\n      if (dist <= 600) {\n        //                this.drawLine(event);\n        return;\n      }\n    }\n\n    this.setState(prev => {\n      points: prev.points.push({\n        x: x,\n        y: y\n      });\n    }, function () {\n      adj.push([]);\n    });\n    this.forceUpdate();\n  }\n\n  drawLine(e, idx) {\n    let u = document.getElementById(`point${idx}`);\n    u.style.fill = 'red';\n    if (v1 === null) v1 = idx;else {\n      v2 = idx;\n      u = document.getElementById(`point${v1}`);\n      u.style.fill = 'orange';\n      u = document.getElementById(`point${v2}`);\n      u.style.fill = 'orange';\n\n      for (let i = 0; i < this.state.edges.length; i++) {\n        if (this.state.edges[i].u === v1 && this.state.edges[i].v === v2) {\n          v1 = null;\n          v2 = null;\n          return;\n        } else if (this.state.edges[i].u === v2 && this.state.edges[i].v === v1) {\n          v1 = null;\n          v2 = null;\n          return;\n        }\n      }\n\n      this.setState(prev => {\n        edges: prev.edges.push({\n          u: v1,\n          v: v2\n        });\n      }, function () {\n        adj[v1].push({\n          vertex: v2,\n          edgeNo: this.state.edges.length - 1\n        });\n        adj[v2].push({\n          vertex: v1,\n          edgeNo: this.state.edges.length - 1\n        });\n        v1 = null;\n        v2 = null;\n      });\n      this.forceUpdate();\n    }\n  }\n\n  reset() {\n    for (let i = 0; i < this.state.points.length; i++) {\n      document.getElementById(`point${i}`).style.fill = 'orange';\n    }\n\n    for (let i = 0; i < this.state.edges.length; i++) {\n      document.getElementById(`edge${i}`).style.stroke = 'red';\n    }\n  }\n\n  clear() {\n    this.setState({\n      points: [],\n      edges: []\n    }, function () {\n      v1 = null;\n      v2 = null;\n      adj = [];\n    });\n    this.forceUpdate();\n  }\n\n  render() {\n    var pts = this.state.points.map((x, idx) => {\n      return React.createElement(\"circle\", {\n        key: \"point\" + idx,\n        id: \"point\" + idx,\n        cx: x.x,\n        cy: x.y,\n        r: \"15\",\n        stroke: \"black\",\n        onClick: event => this.drawLine(event, idx),\n        strokeWidth: \".5\",\n        style: {\n          fill: \"orange\",\n          zIndex: '1',\n          transition: 'all .2s linear',\n          cursor: 'pointer'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    });\n    var ptsidx = this.state.points.map((pt, idx) => {\n      return React.createElement(\"text\", {\n        key: \"index\" + idx,\n        id: \"index\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        x: pt.x - 4,\n        y: pt.y + 4,\n        onClick: event => this.drawLine(event, idx),\n        style: {\n          zIndex: '1',\n          fill: \"#fff\",\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, idx);\n    });\n    var lines = this.state.edges.map((q, idx) => {\n      return React.createElement(\"line\", {\n        key: \"edge\" + idx,\n        id: \"edge\" + idx,\n        x1: this.state.points[q.u].x,\n        y1: this.state.points[q.u].y,\n        x2: this.state.points[q.v].x,\n        y2: this.state.points[q.v].y,\n        style: {\n          stroke: 'red',\n          strokeWidth: '2',\n          zIndex: '-1',\n          transition: 'all .2s linear'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      });\n    });\n    var edgeWeights = this.state.edges.map((edge, idx) => {\n      return React.createElement(\"text\", {\n        key: \"weight\" + idx,\n        id: \"weight\" + idx,\n        fontSize: \"14\",\n        fontFamily: \"Arial\",\n        fill: \"#000\",\n        x: (this.state.points[edge.u].x + this.state.points[edge.v].x) / 2.0,\n        y: (this.state.points[edge.u].y + this.state.points[edge.v].y) / 2.0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"weights[idx]\");\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      paintOrder: \"markers\",\n      ref: \"svg\",\n      width: window.innerWidth,\n      height: \"400\",\n      style: {\n        backgroundColor: '#f2f2f2',\n        cursor: 'crosshair'\n      },\n      onClick: event => this.getMousePosition(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, pts, ptsidx, lines, edgeWeights), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.dfs(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Djikstra's Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.reset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: () => this.clear(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Clear Canvas\"));\n  }\n\n}\nexport default ShortestPath;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","map":{"version":3,"sources":["H:/React/Graph/graph-algorithm-visualizer/src/components/ShortestPath.js"],"names":["React","Component","v1","v2","adj","delay","weights","ShortestPath","constructor","props","state","points","edges","componentDidMount","randomWeights","componentDidUpdate","i","length","getRandomInt","getMousePosition","event","x","clientX","y","clientY","refs","svg","style","marginTop","x1","y1","dist","setState","prev","push","forceUpdate","drawLine","e","idx","u","document","getElementById","fill","v","vertex","edgeNo","reset","stroke","clear","render","pts","map","zIndex","transition","cursor","ptsidx","pt","lines","q","strokeWidth","edgeWeights","edge","window","innerWidth","backgroundColor","dfs","min","max","Math","ceil","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nlet v1=null,v2=null;\r\nlet adj=[]\r\nvar delay=1000\r\nlet weights=[]\r\nexport class ShortestPath extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             points:[],\r\n             edges:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.randomWeights()\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.randomWeights()\r\n    }\r\n    randomWeights(){\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        weights[i]=getRandomInt(1,50);\r\n    }\r\n    getMousePosition(event) { \r\n        let x = event.clientX;//this.refs.svg.style.marginLeft ;\r\n        let y = event.clientY-this.refs.svg.style.marginTop ;\r\n        for(let i=0;i<this.state.points.length;i++)\r\n        {\r\n            let x1=this.state.points[i].x;\r\n            let y1=this.state.points[i].y;\r\n            let dist=(x-x1)*(x-x1)+(y-y1)*(y-y1);\r\n            if(dist<=600)\r\n            {\r\n//                this.drawLine(event);\r\n                return;\r\n            }\r\n        }\r\n        this.setState((prev)=>{\r\n            points:prev.points.push({\r\n                x:x,\r\n                y:y\r\n            })\r\n        },function(){\r\n            adj.push([])\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    drawLine(e,idx){\r\n        let u=document.getElementById(`point${idx}`);\r\n        u.style.fill='red';\r\n        if(v1===null)\r\n        v1=idx;\r\n        else {\r\n            v2=idx;\r\n            u=document.getElementById(`point${v1}`);\r\n            u.style.fill='orange';\r\n            u=document.getElementById(`point${v2}`);\r\n            u.style.fill='orange';\r\n            for(let i=0;i<this.state.edges.length;i++)\r\n            {\r\n                if(this.state.edges[i].u===v1 && this.state.edges[i].v===v2)\r\n                {   v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n                else if(this.state.edges[i].u===v2 && this.state.edges[i].v===v1)\r\n                {\r\n                    v1=null\r\n                    v2=null\r\n                    return;\r\n                }\r\n            }\r\n            this.setState((prev)=>{\r\n                edges:prev.edges.push({\r\n                    u:v1,\r\n                    v:v2\r\n                })\r\n            },function(){\r\n                adj[v1].push({vertex:v2,edgeNo:this.state.edges.length-1})\r\n                adj[v2].push({vertex:v1,edgeNo:this.state.edges.length-1})\r\n                v1=null\r\n                v2=null\r\n            })\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        for(let i=0;i<this.state.points.length;i++){\r\n            document.getElementById(`point${i}`).style.fill='orange'\r\n        }\r\n        for(let i=0;i<this.state.edges.length;i++)\r\n        {\r\n            document.getElementById(`edge${i}`).style.stroke='red'\r\n        }\r\n    }\r\n    clear(){\r\n        this.setState({\r\n            points:[],\r\n            edges:[]\r\n        },function(){\r\n            v1=null\r\n            v2=null\r\n            adj=[]\r\n        })\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        var pts=this.state.points.map((x,idx)=>{\r\n            return(\r\n            <circle key={\"point\"+idx} id={\"point\"+idx} cx={x.x} cy={x.y} r=\"15\" stroke=\"black\" onClick={(event)=>this.drawLine(event,idx)} strokeWidth=\".5\" style={{fill:\"orange\",zIndex:'1',transition:'all .2s linear',cursor:'pointer'}} />\r\n            )\r\n        })\r\n        var ptsidx=this.state.points.map((pt,idx)=>{\r\n            return(\r\n                <text  key={\"index\"+idx} id={\"index\"+idx} fontSize=\"14\" fontFamily=\"Arial\" x={pt.x-4} y={pt.y+4} onClick={(event)=>this.drawLine(event,idx)} style={{zIndex:'1',fill:\"#fff\",transition:'all .2s linear'}}>{idx}</text>\r\n            )\r\n        })\r\n        var lines=this.state.edges.map((q,idx)=>{\r\n            return(\r\n                <line key={\"edge\"+idx} id={\"edge\"+idx} x1={this.state.points[q.u].x} y1={this.state.points[q.u].y} x2={this.state.points[q.v].x} y2={this.state.points[q.v].y} style={{stroke:'red',strokeWidth:'2',zIndex:'-1',transition:'all .2s linear'}} />\r\n            )\r\n        })\r\n        var edgeWeights=this.state.edges.map((edge,idx)=>{\r\n            return(\r\n                <text key={\"weight\"+idx} id={\"weight\"+idx} fontSize=\"14\" fontFamily=\"Arial\" fill=\"#000\" x={(this.state.points[edge.u].x+this.state.points[edge.v].x)/2.0} y={(this.state.points[edge.u].y+this.state.points[edge.v].y)/2.0} >weights[idx]</text>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n            <svg paintOrder='markers' ref='svg' width={window.innerWidth} height=\"400\" style={{backgroundColor: '#f2f2f2',cursor:'crosshair'}} onClick={(event)=>this.getMousePosition(event)}>\r\n            {pts}\r\n            {ptsidx}\r\n            {lines}\r\n            {edgeWeights}\r\n            </svg>\r\n            <br/>\r\n            <button onClick={()=>this.dfs(0)}>Djikstra's Algorithm</button>\r\n            <button onClick={()=>this.reset()}>Reset</button>\r\n            <button onClick={()=>this.clear()}>Clear Canvas</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShortestPath\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}"]},"metadata":{},"sourceType":"module"}